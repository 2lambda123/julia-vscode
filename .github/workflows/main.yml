name: Build and Test

on:
  pull_request:
    branches:
      - master
  check_run:
    types: [rerequested, requested_action]
  push:
    branches:
      - master
    tags:
      - 'v*'
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:

  lintExtension:
    name: Lint Extension
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - run: npm ci
      - run: npx eslint -c .eslintrc.json --ext .ts src

  testExtension:
    name: Test Extension
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        julia_version: ['1.0', 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{matrix.julia_version}}
      - run: npm ci
      - run: npm run compile
      - run: xvfb-run -a npm test
        if: runner.os == 'Linux'
      - run: npm test
        if: runner.os != 'Linux'

  testJuliaPackages:
    name: Test Julia Packages
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        julia_version: ['1.0', 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{matrix.julia_version}}
      - name: 'Run the Julia tests'
        run: |
          julia -e 'using InteractiveUtils; versioninfo()'
          julia --project=./scripts/environments/languageserver/v${{matrix.julia_version}} -e 'using Pkg; Pkg.resolve()'
          julia --project=./scripts/environments/languageserver/v${{matrix.julia_version}} -e 'using Pkg; Pkg.test("CSTParser", coverage=true)'
          julia --project=./scripts/environments/languageserver/v${{matrix.julia_version}} -e 'using Pkg; Pkg.test("JSONRPC", coverage=true)'
          julia --project=./scripts/environments/languageserver/v${{matrix.julia_version}} -e 'using Pkg; Pkg.test("LanguageServer", coverage=true)'
          julia --project=./scripts/environments/languageserver/v${{matrix.julia_version}} -e 'using Pkg; Pkg.test("StaticLint", coverage=true)'
          julia --project=./scripts/environments/languageserver/v${{matrix.julia_version}} -e 'using Pkg; Pkg.test("SymbolServer", coverage=true)'
          julia --project=./scripts/environments/languageserver/v${{matrix.julia_version}} -e 'using Pkg; Pkg.test("TestItemDetection", coverage=true)'
          julia --project=./scripts/testenvironments/debugadapter/v${{matrix.julia_version}} -e 'using Pkg; Pkg.test("DebugAdapter", coverage=true)'
          julia --project=./scripts/testenvironments/vscodedebugger/v${{matrix.julia_version}} -e 'using Pkg; Pkg.test("VSCodeDebugger", coverage=true)'
          julia --project=./scripts/testenvironments/vscodeserver/v${{matrix.julia_version}} -e 'using Pkg; Pkg.test("VSCodeServer", coverage=true)'

  buildReleaseVSIX:
    name: Build Release VSIX
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - run: npm ci
      - run: npm run package
      - uses: actions/upload-artifact@v3
        with:
          name: release-vsix
          path: '*.vsix'

  deployInsiderVSCMarketplace:
    name: Deploy Insider to VS Code Marketplace
    needs: [lintExtension, testExtension, testJuliaPackages, buildInsiderVSIX]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment: insider-channel
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - Name: Install vsce
        run: npm install -g vsce
      - name: Publish package
        env:
          MARKET_KEY: ${{secrets.VSCEKEY}}
        run: |
          vsce publish --pre-release -p $MARKET_KEY patch

  # deployInsiderOVSXMarketplace:
  #   name: Deploy Insider to Open VSX Marketplace
  #   needs: [lintExtension, testExtension, testJuliaPackages, buildInsiderVSIX]
  #   if: startsWith(github.ref, 'refs/tags/')
  #   runs-on: ubuntu-latest
  #   environment: insider-channel
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: insider-vsix
  #         path: .
  #     - name: Find filename
  #       shell: pwsh
  #       run: |
  #         $filename =  (Get-ChildItem *.vsix)[0].FullName
  #         echo "PACKAGE_FILENAME=$($filename)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
  #     - name: Publish package
  #       env:
  #         MARKET_KEY: ${{secrets.OVSXKEY}}
  #       run: |
  #         npx ovsx publish $PACKAGE_FILENAME -p $MARKET_KEY

  deployReleaseVSCMarketplace:
    name: Deploy Release to VS Code Marketplace
    needs: [lintExtension, testExtension, testJuliaPackages, buildReleaseVSIX]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment: release-channel
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - Name: Install vsce
        run: npm install -g vsce
      - run: npm version patch --no-git-tag-version
      - name: Publish package
        env:
          MARKET_KEY: ${{secrets.VSCEKEY}}
        run: |
          vsce publish -p $MARKET_KEY patch

  # deployReleaseOVSXMarketplace:
  #   name: Deploy Release to Open VSX Marketplace
  #   needs: [lintExtension, testExtension, testJuliaPackages, buildReleaseVSIX]
  #   if: startsWith(github.ref, 'refs/tags/')
  #   runs-on: ubuntu-latest
  #   environment: release-channel
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: release-vsix
  #         path: .
  #     - name: Find filename
  #       shell: pwsh
  #       run: |
  #         $filename =  (Get-ChildItem *.vsix)[0].FullName
  #         echo "PACKAGE_FILENAME=$($filename)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
  #     - name: Publish package
  #       env:
  #         MARKET_KEY: ${{secrets.OVSXKEY}}
  #       run: |
  #         npx ovsx publish $PACKAGE_FILENAME -p $MARKET_KEY

  # deployInsiderGitHub:
  #   name: Deploy Insider to GitHub Release
  #   needs: [lintExtension, testExtension, testJuliaPackages, buildInsiderVSIX]
  #   if: startsWith(github.ref, 'refs/tags/')
  #   environment: insider-channel
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: insider-vsix
  #         path: .
  #     - name: Find filename
  #       shell: pwsh
  #       run: |
  #         $filename =  (Get-ChildItem *.vsix)[0].FullName
  #         echo "PACKAGE_FILENAME=$($filename)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
  #     - name: Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         files: ${{env.PACKAGE_FILENAME}}
  #         prerelease: true
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # deployReleaseGitHub:
  #   name: Deploy Release to GitHub Release
  #   needs: [lintExtension, testExtension, testJuliaPackages, buildReleaseVSIX]
  #   if: startsWith(github.ref, 'refs/tags/')
  #   runs-on: ubuntu-latest
  #   environment: release-channel
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: release-vsix
  #         path: .
  #     - name: Find filename
  #       shell: pwsh
  #       run: |
  #         $filename =  (Get-ChildItem *.vsix)[0].FullName
  #         echo "PACKAGE_FILENAME=$($filename)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
  #     - name: Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         files: ${{env.PACKAGE_FILENAME}}
  #         prerelease: false
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
