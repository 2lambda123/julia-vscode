name: Build and Test

on:
  pull_request:
    branches:
      - master
  check_run:
    types: [rerequested, requested_action]
  push:
    branches:
      - master
    tags:
      - 'v*'
  workflow_dispatch:

env:
  NODE_VERSION: '12'

defaults:
  run:
    shell: bash

jobs:

  lintExtension:
    name: Lint Extension
    runs-on: ubuntu-latest
    # if: github.repository == 'julia-vscode/julia-vscode'
    steps:
      - uses: actions/checkout@v2

      - run: npm install
      # - run: npm i -D @actions/core
      # - run: npm i -D @actions/github
      # - run: npm i -D @octokit/core
      # - run: npm i -D @octokit/plugin-paginate-rest
      # - run: npm i -D @octokit/webhooks

      # - name: Verify linting is turned on for changed files
      #   uses: ./.github/actions/modified-files
      #   id: modified-folders

      # - name: Dump
      #   run: echo "${{steps.modified-folders.outputs.modifiedRootFolders}}"

      - run: npx eslint -c .eslintrc.json --ext .ts src

      # - name: Run prettier on TypeScript code
      #   run: npx prettier 'src/**/*.ts*' --check

      # - name: Run prettier on JavaScript code
      #   run: npx prettier 'build/**/*.js' --check

  testExtension:
    name: Test Extension
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        julia_version: [1.6]
    if: github.repository == 'julia-vscode/julia-vscode'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'

      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{matrix.julia_version}}

      - run: npm install

      - run: npm run compile

      - name: Set xvfb parameters linux
        if: matrix.os == 'ubuntu-latest'
        run: echo "xvfbCommand=--server-args=\"-screen 0 1024x768x24\"" >> $GITHUB_ENV

      - name: Run tests
        if: matrix.os == 'ubuntu-latest'
        env:
          DISPLAY: 10
        uses: GabrielBB/xvfb-action@v1.4
        with:
          run: npm run test

      - name: Run tests
        if: matrix.os == 'macos-latest' || matrix.os == 'windows-latest'
        run: npm run test

  testJuliaPackages:
    name: Test Julia Packages
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        julia_version: ['1.0', 1.1, 1.2, 1.3, 1.4, 1.5, 1.6]
    if: github.repository == 'julia-vscode/julia-vscode'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'

      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{matrix.julia_version}}

      - name: 'Run the Julia tests'
        run: |
          julia -e 'using InteractiveUtils; versioninfo()'
          # julia --project=./scripts/environments/languageserver -e 'using Pkg; Pkg.resolve()'
          # julia --project=./scripts/environments/languageserver -e 'using Pkg; Pkg.test("CSTParser", coverage=true)'
          # julia --project=./scripts/environments/languageserver -e 'using Pkg; Pkg.test("JSONRPC", coverage=true)'
          # julia --project=./scripts/environments/languageserver -e 'using Pkg; Pkg.test("DocumentFormat", coverage=true)'
          # julia --project=./scripts/environments/languageserver -e 'using Pkg; Pkg.test("LanguageServer", coverage=true)'
          # julia --project=./scripts/environments/languageserver -e 'using Pkg; Pkg.test("StaticLint", coverage=true)'
          # julia --project=./scripts/environments/languageserver -e 'using Pkg; Pkg.test("SymbolServer", coverage=true)'
          # julia --project=./scripts/testenvironments/debugadapter -e 'using Pkg; Pkg.test("DebugAdapter", coverage=true)'
          # julia --project=./scripts/testenvironments/vscodedebugger -e 'using Pkg; Pkg.test("VSCodeDebugger", coverage=true)'
          # julia --project=./scripts/testenvironments/vscodeserver -e 'using Pkg; Pkg.test("VSCodeServer", coverage=true)'
          # julia --project=./scripts/testenvironments/chromeprofileformat -e 'using Pkg; Pkg.test("ChromeProfileFormat", coverage=true)'

  buildReleaseVSIX:
    name: Build Release VSIX
    runs-on: ubuntu-latest
    # if: github.repository == 'julia-vscode/julia-vscode'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/setup-node@v2
        with:
          node-version: ${{env.NODE_VERSION}}

      - run: npm install

      - run: npm run package

      - uses: actions/upload-artifact@v2
        with:
          name: release-vsix
          path: '*.vsix'

  buildInsiderVSIX:
    name: Build Insider VSIX
    runs-on: windows-latest
    # if: github.repository == 'julia-vscode/julia-vscode'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/setup-node@v2
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Modify package.json
        shell: pwsh
        run: |
          $package = Get-Content package.json | ConvertFrom-Json
          $package.description = "Julia Language Support (Insider)"
          $package.displayName = "Julia Insider"
          $package.name ="language-julia-insider"
          $package.preview = "true"
          $package | ConvertTo-Json | Out-File package.json
          Move-Item -Force README-insider.md README.md

      - run: npm install

      - run: npm run package

      - uses: actions/upload-artifact@v2
        with:
          name: insider-vsix
          path: '*.vsix'

  deployInsiderMarketplace:
    name: Deploy Insider to Marketplace
    needs: [lintExtension, testExtension, testJuliaPackages, buildInsiderVSIX]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment: insider-channel
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: insider-vsix
          path: .
      - name: Find filename
        shell: pwsh
        run: |
          $filename =  (Get-ChildItem *.vsix)[0].FullName
          echo "PACKAGE_FILENAME=$($filename)" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Publish package
        env:
          MARKET_KEY: ${{secrets.VSCEKEY}}
        run: |
          sudo npm install -g vsce
          vsce publish -p $MARKET_KEY --packagePath $PACKAGE_FILENAME
